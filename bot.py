import time
import requests
from storage import load_data, save_data
from flask import Flask
import threading
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
LEADERBOARD_URL = os.getenv("LEADERBOARD_URL")


app = Flask(__name__)

# Fonction pour envoyer un message test sur Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        r = requests.post(url, json=payload)
        print("üì® Message Telegram envoy√©:", r.json())
    except Exception as e:
        print("‚ùå Erreur envoi Telegram:", e)

# Fonction pour v√©rifier et simuler le leaderboard
def check_leaderboard():
    data = load_data()

    # üîπ Test forc√© : si le fichier est vide, on ajoute une entr√©e fictive
    if not data:
        print("‚ö° Aucune donn√©e d√©tect√©e, ajout d'une entr√©e fictive pour test...")
        data = {
            "last_check": time.strftime("%Y-%m-%d %H:%M:%S"),
            "players": [
                {"name": "TestUser", "score": 9999}
            ]
        }
        save_data(data)
        send_telegram_message("‚úÖ Bot en ligne ! Donn√©es de test enregistr√©es.")
    else:
        print("üì° Donn√©es d√©j√† pr√©sentes, pas besoin de test.")

    return data

# T√¢che en arri√®re-plan
def run_checker():
    while True:
        check_leaderboard()
        time.sleep(60)  # v√©rifie toutes les 60 secondes

@app.route('/')
def home():
    return "Bot WorldGuessr est en ligne üöÄ"

@app.route('/show-logs')
def show_logs():
    data = load_data()
    if not data:
        return "storage.json n'existe pas encore ou est vide."
    return str(data)

# Lancer le checker dans un thread parall√®le
threading.Thread(target=run_checker, daemon=True).start()

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000)
